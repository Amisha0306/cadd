code:
module BCD_adder(
    input  logic [7:0] A,   
    input  logic [7:0] B,   
    input  logic       Cin, 
    output logic [7:0] S,   
    output logic       Cout 
);
    logic [4:0] sum0, sum1; 
    logic [3:0] adj0, adj1; 
    logic       carry0, carry1; 
    assign sum0 = A[3:0] + B[3:0] + Cin;
    assign adj0 = (sum0 > 9) ? sum0 + 6 : sum0;
    assign carry0 = (sum0 > 9);
    assign sum1 = A[7:4] + B[7:4] + carry0;
    assign adj1 = (sum1 > 9) ? sum1 + 6 : sum1;
    assign carry1 = (sum1 > 9);
    assign S = {adj1[3:0], adj0[3:0]};
    assign Cout = carry1;

endmodule


tb:
module BCD_Adder_TB;
    // Testbench signals
    logic [7:0] A, B;
    logic       Cin;
    logic [7:0] S;
    logic       Cout;

    // Instantiate the DUT (Device Under Test)
    BCD_Adder dut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .S(S),
        .Cout(Cout)
    );

    // Testbench logic
    initial begin
        $display("Time\tA\t\tB\t\tCin\tS\t\tCout");
        $monitor("%0t\t%0d\t%0d\t%b\t%0d\t%b", $time, A, B, Cin, S, Cout);

        // Test cases
        A = 8'd12; B = 8'd3;  Cin = 0; #10; // 12 + 3
        A = 8'd21; B = 8'd12; Cin = 1; #10; // 21 + 12 + 1
        A = 8'd43; B = 8'd45; Cin = 0; #10; // 43 + 45
        A = 8'd99; B = 8'd99; Cin = 1; #10; // 99 + 99 + 1

        $stop;
    end
endmodule



